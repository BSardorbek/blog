<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Akshay Shah</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on Akshay Shah</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 15 May 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Podcasts for Developers</title>
      <link>http://localhost:1313/post/podcasts-for-developers/</link>
      <pubDate>Fri, 15 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/podcasts-for-developers/</guid>
      <description>

&lt;p&gt;Even though computer science doesn&amp;rsquo;t change too quickly, software engineering
changes all the time. New libraries, languages, and architectural patterns
emerge, jump the shark, and die, only to re-emerge a few years later. How&amp;rsquo;s a
working engineer supposed to keep up without spending every free moment
on Hacker News?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Podcasts&lt;/em&gt;, that&amp;rsquo;s how. Unfortunately, most podcasts are meandering
monologues recorded on a laptop microphone. After a few
years of avid listening, though, I&amp;rsquo;ve found a pretty good selection of
shows&amp;mdash;if you share my interests in web development, data science, and startups,
you may find something you like. All these podcasts regularly produce great
episodes, but I listen to the three-star shows religiously and the one-star shows
only if the topic sounds appealing.&lt;/p&gt;

&lt;p&gt;If you know of a great show that isn&amp;rsquo;t on my list, &lt;a href=&#34;mailto:akshay@akshayshah.org&#34;&gt;let me
know&lt;/a&gt; &amp;mdash; I&amp;rsquo;m always looking for something new.&lt;/p&gt;

&lt;h2 id=&#34;general-engineering&#34;&gt;General Engineering&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://www.se-radio.net/&#34;&gt;Software Engineering Radio&lt;/a&gt; ★★★&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://changelog.com/podcast/&#34;&gt;The Changelog&lt;/a&gt; ★★★&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://hanselminutes.com/&#34;&gt;Hanselminutes&lt;/a&gt; ★★&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.talkpythontome.com/&#34;&gt;Talk Python to Me&lt;/a&gt; ★★&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jupiterbroadcasting.com/show/coderradio/&#34;&gt;Coder Radio&lt;/a&gt; ★★&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://theshipshow.com/&#34;&gt;The Ship Show&lt;/a&gt; ★&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;the-web&#34;&gt;The Web&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://5by5.tv/bigwebshow&#34;&gt;The Big Web Show&lt;/a&gt; ★★&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://pathtoperf.com/&#34;&gt;The Path to Performance&lt;/a&gt; ★★&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://thewebahead.net/&#34;&gt;The Web Ahead&lt;/a&gt; ★ (the &lt;a href=&#34;http://thewebahead.net/34&#34;&gt;Web
Behind&lt;/a&gt; sub-series was ★★★)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://devchat.tv/js-jabber/&#34;&gt;JavaScript Jabber&lt;/a&gt; ★&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;data-science-and-big-data&#34;&gt;Data Science and Big Data&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://www.thetalkingmachines.com/&#34;&gt;Talking Machines&lt;/a&gt; ★★★&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://radar.oreilly.com/tag/oreilly-data-show-podcast&#34;&gt;O&amp;rsquo;Reilly Data Show&lt;/a&gt; ★&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;startups-and-silicon-valley&#34;&gt;Startups and Silicon Valley&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://gimletmedia.com/show/startup/&#34;&gt;StartUp Podcast&lt;/a&gt; ★★★&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://a16z.com/tag/podcasts/&#34;&gt;a16z&lt;/a&gt; ★&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;podcatchers&#34;&gt;Podcatchers&lt;/h2&gt;

&lt;p&gt;A quick word on podcasting clients: the official podcast clients from Apple and
Google are okay, but it&amp;rsquo;s worth spending a few dollars to get a top-notch
third-party app. If you&amp;rsquo;re on iOS, Marco Arment&amp;rsquo;s
&lt;a href=&#34;https://overcast.fm/&#34;&gt;Overcast&lt;/a&gt; is simply &lt;em&gt;amazing&lt;/em&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Testing Django Fields</title>
      <link>http://localhost:1313/post/testing-django-fields/</link>
      <pubDate>Thu, 15 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/testing-django-fields/</guid>
      <description>&lt;p&gt;I love the flexibility that custom Django fields, abstract models, managers,
and querysets offer, but unit testing them is a pain. Ideally, the tests for
custom Django fields should be completely isolated from the models that use the
fields in production; deciding that, for example, my &lt;code&gt;User&lt;/code&gt; model no longer
needs to support soft deletion shouldn&amp;rsquo;t affect the tests for the &lt;a href=&#34;http://localhost:1313/post/django-soft-deletion/&#34;&gt;soft-deletion
field&lt;/a&gt; itself.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;http://stackoverflow.com/questions/502916/django-how-to-create-a-model-dynamically-just-for-testing&#34;&gt;most common approach&lt;/a&gt; to this problem is simple, if annoying: declare
all test-specific models in &lt;code&gt;test/models.py&lt;/code&gt;, but don&amp;rsquo;t include the test app
in &lt;code&gt;INSTALLED APPS&lt;/code&gt;. In your test suite&amp;rsquo;s setup method, monkey-patch your
settings to include the test app and run Django&amp;rsquo;s &lt;code&gt;syncdb&lt;/code&gt; command, and
un-patch your settings in the teardown method. Dynamically altering your
settings in the test suite keeps your production database clean &amp;ndash; a rogue
&lt;code&gt;syncdb&lt;/code&gt; won&amp;rsquo;t suddenly create dozens of useless new tables. My biggest gripe
with this approach, though, is that it forces you to separate your test code
into two files. The tests become much harder to read, and the file of test
models inevitably becomes a crufty mess.&lt;/p&gt;

&lt;p&gt;After a few months of low-level frustration, I finally came up with a better
solution. By making all my test models inherit from this abstract model, I can
have it all: no raw SQL, no test tables in production, and model definitions
alongside my test code.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from django.core.management.color import no_style
from django.db import connection, models


class TestModel(models.Model):

    class Meta:
        abstract = True

    @classmethod
    def create_table(cls):
        # Cribbed from Django&#39;s management commands.
        raw_sql, refs = connection.creation.sql_create_model(
            cls,
            no_style(),
            [])
        create_sql = u&#39;\n&#39;.join(raw_sql).encode(&#39;utf-8&#39;)
        cls.delete_table()
        cursor = connection.cursor()
        try:
            cursor.execute(create_sql)
        finally:
            cursor.close()

    @classmethod
    def delete_table(cls):
        cursor = connection.cursor()
        try:
            cursor.execute(&#39;DROP TABLE IF EXISTS %s&#39; % cls._meta.db_table)
        except:
            # Catch anything backend-specific here.
            # (E.g., MySQLdb raises a warning if the table didn&#39;t exist.)
            pass
        finally:
            cursor.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To avoid boilerplate table management in my test setup and teardown code, I
added a little functionality to Django&amp;rsquo;s built-in &lt;code&gt;TestCase&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from django.test import TestCase


class ModelTestCase(TestCase):
    temporary_models = tuple()

    def setUp(self):
        self._map_over_temporary_models(&#39;create_table&#39;)
        super(ModelTestCase, self).setUp()

    def tearDown(self):
        self._map_over_temporary_models(&#39;delete_table&#39;)
        super(ModelTestCase, self).tearDown()

    def _map_over_temporary_models(self, method_name):
        for m in self.temporary_models:
            try:
                getattr(m, method_name)()
            except AttributeError:
                raise TypeError(&amp;quot;%s doesn&#39;t support table mgmt.&amp;quot; % m)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Looking for an example? Here&amp;rsquo;s a section of the test suite for my
&lt;a href=&#34;http://localhost:1313/post/django-soft-deletion/&#34;&gt;soft-deletion field&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from django.db import IntegrityError, models

from myproject.soft_deletion.models import SoftDeletionModel
from myproject.test.models import TestModel
from myproject.test.testcase import ModelTestCase


class Person(SoftDeletionModel, TestModel):
    name = models.CharField(max_length=20)

    class Meta:
        unique_together = (&#39;name&#39;, &#39;alive&#39;)


class SoftDeletionTests(ModelTestCase):
    temporary_models = (Person,)

    def test_inits_alive(self):
        p = Person.objects.create(name=&#39;Alive&#39;)
        self.assertTrue(p.alive)

    def test_allows_many_deleted_with_same_name(self):
        Person.objects.create(name=&#39;Akshay&#39;).delete()
        Person.objects.create(name=&#39;Akshay&#39;).delete()

        # One un-deleted Akshay is okay.
        Person.objects.create(name=&#39;Akshay&#39;)
        self.assertEqual(Person.all_objects.count(), 3)

        # Resurrecting one of the dupes violates constraint.
        first = Person.all_objects.all()[0]
        first.alive = True
        self.assertRaises(IntegrityError, first.save)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Questions? Have a better idea? &lt;a href=&#34;mailto:akshay@akshayshah.org&#34;&gt;Let me know&lt;/a&gt;!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>License Your Code!</title>
      <link>http://localhost:1313/post/license-your-code/</link>
      <pubDate>Sun, 04 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/license-your-code/</guid>
      <description>

&lt;p&gt;If you&amp;rsquo;re a &lt;a href=&#34;http://github.com&#34;&gt;GitHub&lt;/a&gt; user, you probably
want to let other people use your code in their own projects. Just throwing
your code online isn&amp;rsquo;t enough, though &amp;ndash; you &lt;em&gt;have&lt;/em&gt; to release it under an
open-source license.  If you&amp;rsquo;re not sure why, read on: in this post, I&amp;rsquo;ll
explain the absolute minimum that every developer should know about copyright
and software licensing.&lt;/p&gt;

&lt;p&gt;Even though I&amp;rsquo;m not a lawyer, I&amp;rsquo;ll start with a few
disclaimers: this post isn&amp;rsquo;t legal advice, I&amp;rsquo;m not going to address patents at
all, and some of what I&amp;rsquo;m about to explain is specific to the United States.&lt;/p&gt;

&lt;h2 id=&#34;closed-by-default&#34;&gt;Closed by Default&lt;/h2&gt;

&lt;p&gt;In the US, every shred of code you&amp;rsquo;ve ever written is automatically protected
by copyright. That means, broadly speaking, that it&amp;rsquo;s your property.  If you
leave your bike unlocked outside a coffee shop, I&amp;rsquo;m not allowed to walk by and
steal it; similarly, if you post your code online, I&amp;rsquo;m not automatically
allowed to copy and use it. Don&amp;rsquo;t worry, though&amp;mdash;seventy years after you die,
the copyright expires and your code enters the &lt;em&gt;public domain&lt;/em&gt;, at which point
I can finally use it however I like.&lt;/p&gt;

&lt;p&gt;Under American law, it&amp;rsquo;s very difficult to reliably circumvent the century-long
wait before your copyright expires. To let other developers legally copy,
modify, and reuse your code while it&amp;rsquo;s still relevant, you have to offer it to
them under a &lt;em&gt;license&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&#34;permissive-licensing&#34;&gt;Permissive Licensing&lt;/h2&gt;

&lt;p&gt;Licenses are just agreements between you, the author and owner of the code, and
all the other developers who&amp;rsquo;d like to use your code. Even if you&amp;rsquo;ve never
exchanged emails or chatted on the phone, you can sue developers who use your
code but don&amp;rsquo;t follow the rules in your license.&lt;/p&gt;

&lt;p&gt;Some open-source software licenses are quite straightforward: they let other
developers do whatever they&amp;rsquo;d like with your code as long as they don&amp;rsquo;t hold
you liable for the consequences. They can package your library into a
closed-source application and sell subscriptions, they can modify the code and
distribute it under a different license, and they can even sell copies of your
code without changing a single line. If your code has a bug that causes a
nuclear meltdown, though, they&amp;rsquo;re on their own. Because they let other
developers do whatever they&amp;rsquo;d like, these licenses are often called
&lt;em&gt;permissive&lt;/em&gt;; the &lt;a href=&#34;https://en.wikipedia.org/wiki/MIT_License&#34;&gt;MIT license&lt;/a&gt; is a popular example.&lt;/p&gt;

&lt;h2 id=&#34;copyleft&#34;&gt;Copyleft&lt;/h2&gt;

&lt;p&gt;But what if you don&amp;rsquo;t want your code integrated into closed-source systems?
Richard Stallman and the &lt;a href=&#34;http://fsf.org&#34;&gt;Free Software Foundation&lt;/a&gt; are right there with
you. In a clever legal hack, they wrote the &lt;a href=&#34;http://en.wikipedia.org/wiki/GNU_General_Public_License&#34;&gt;GPL&lt;/a&gt;, a license which lets other
developers run, read, change, and share your source code, but requires that any
copies (modified or not) be licensed in a way that preserves the same freedoms.
Licensing your work under the GPL allows other people to integrate your code
into a paid product, but it forces them to license their product under the GPL,
too (or something that&amp;rsquo;s essentially identical). In short, your code and all
its descendants will be free forever, but many companies won&amp;rsquo;t be willing to
use it. Because it uses a copyright hack to attack the very notion of
software ownership, the GPL and its variants are often called &lt;em&gt;copyleft&lt;/em&gt;
licenses.&lt;/p&gt;

&lt;p&gt;And with that, you know more than 99% of programmers about software licensing.
Stand proud, grasshopper, and remember to include an explicit license when
sharing your code online.&lt;/p&gt;

&lt;h2 id=&#34;more-questions&#34;&gt;More Questions?&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Need a refresher? Looking for some actual legalese to include in your
project? Check out GitHub&amp;rsquo;s &lt;a href=&#34;http://choosealicense.com/&#34;&gt;license picker&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Want to know more about intellectual property and open source? Read Richard
Stallman&amp;rsquo;s &lt;a href=&#34;http://www.gnu.org/philosophy/why-free.html&#34;&gt;Why Software Should Not Have Owners&lt;/a&gt;. It&amp;rsquo;s a seminal
piece, and it&amp;rsquo;s well worth your time.&lt;/li&gt;
&lt;li&gt;Wondering why most folks these days call it &amp;ldquo;open-source&amp;rdquo; and not &amp;ldquo;free&amp;rdquo;
software? Read Eric Raymond&amp;rsquo;s &lt;a href=&#34;http://catb.org/~esr/open-source.html&#34;&gt;1998 call to action&lt;/a&gt;. While
you&amp;rsquo;re there, you may want to check out &lt;a href=&#34;http://catb.org/esr/writings/cathedral-bazaar/cathedral-bazaar/&#34;&gt;The Cathedral and the Bazaar&lt;/a&gt;.
(Ignore anything related to guns, sex, or politics.) For Stallman&amp;rsquo;s response,
read &lt;a href=&#34;http://www.gnu.org/philosophy/open-source-misses-the-point.html&#34;&gt;Why Open Source Misses the Point of Free Software&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Curious how all this copyright stuff relates to software patents? It&amp;rsquo;s
complicated. Patents aren&amp;rsquo;t the same thing as copyright, though some
open-source licenses attempt to address them. Think of patent protection as
another axis that&amp;rsquo;s orthogonal to the permissive-copyleft axis.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Soft Deletion in Django</title>
      <link>http://localhost:1313/post/django-soft-deletion/</link>
      <pubDate>Thu, 09 May 2013 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/django-soft-deletion/</guid>
      <description>

&lt;p&gt;Like any self-respecting data nerd, I find deleting database records abhorrent.
What happens if I need to resurrect those records later? What if I want to run
a survival analysis? Django&amp;rsquo;s ORM doesn&amp;rsquo;t offer any out-of-the-box support for
soft-deletion, but it&amp;rsquo;s not difficult to preserve your data by overriding a few
methods and flipping a Boolean field instead of actually deleting anything.
After living with that system for a while, though, I&amp;rsquo;m convinced that it&amp;rsquo;s
inadequate; in this post, I&amp;rsquo;ll explain its principal shortcoming and propose a
slightly more complex, but vastly better, alternative.
&lt;label for=&#34;mn-update-django-livefield&#34; class=&#34;margin-toggle&#34;&gt;&amp;#8853;&lt;/label&gt;
&lt;input type=&#34;checkbox&#34; id=&#34;mn-update-django-livefield&#34; class=&#34;margin-toggle&#34;&gt;
&lt;span class=&#34;marginnote&#34;&gt;
    &lt;em&gt;Update:&lt;/em&gt; 
I&amp;rsquo;ve open-sourced this soft-deletion
plug-in as &lt;code&gt;django-livefield&lt;/code&gt;. You can install it from &lt;a
href=&#34;https://pypi.python.org/pypi/django-livefield/&#34; title=&#34;django-livefield
on PyPI&#34;&gt;PyPI&lt;/a&gt; or check out the code on &lt;a
href=&#34;https://github.com/hearsaycorp/django-livefield&#34; title=&#34;django-livefield
on GitHub&#34;&gt;GitHub&lt;/a&gt;. Try it out and let me know what you think!

&lt;/span&gt;
&lt;/p&gt;

&lt;h2 id=&#34;naive-soft-deletion&#34;&gt;Naive Soft-Deletion&lt;/h2&gt;

&lt;p&gt;At first blush, soft-deletion seems embarrassingly simple. If you&amp;rsquo;re like me,
a system like this probably springs to mind:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from django.db import models
from django.db.models.query import QuerySet


class SoftDeletionQuerySet(QuerySet):
    def delete(self):
        # Bulk delete bypasses individual objects&#39; delete methods.
        return super(SoftDeletionQuerySet, self).update(alive=False)

    def hard_delete(self):
        return super(SoftDeletionQuerySet, self).delete()

    def alive(self):
        return self.filter(alive=True)

    def dead(self):
        return self.exclude(alive=True)


class SoftDeletionManager(models.Manager):
    def __init__(self, *args, **kwargs):
        self.alive_only = kwargs.pop(&#39;alive_only&#39;, True)
        super(SoftDeletionManager, self).__init__(*args, **kwargs)

    def get_queryset(self):
        if self.alive_only:
            return SoftDeletionQuerySet(self.model).filter(alive=True)
        return SoftDeletionQuerySet(self.model)

    def hard_delete(self):
        return self.get_queryset().hard_delete()


class SoftDeletionModel(models.Model):
    alive = models.BooleanField(default=True)

    objects = SoftDeletionManager()
    all_objects = SoftDeletionManager(alive_only=False)

    class Meta:
        abstract = True

    def delete(self):
        self.alive = False
        self.save()

    def hard_delete(self):
        super(SoftDeletionModel, self).delete()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This approach is straightforward and readable, and for nearly two years it
worked well for us at &lt;a href=&#34;http://hearsaysocial.com/careers/&#34;&gt;Hearsay Social&lt;/a&gt;.
&lt;em&gt;However, it inevitably leads to data corruption.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The problem is simple: using a Boolean to store deletion status makes it
impossible to enforce uniqueness constraints in your database. Let&amp;rsquo;s say you&amp;rsquo;re
storing user records which should have unique email addresses; with this
soft-deletion scheme, you can only have one active record for
&amp;ldquo;betty@smith.com&amp;rdquo;. Including deletion status in your constraint lets you keep
both a soft-deleted and an active record with the same email address, but then
you&amp;rsquo;re out of luck &amp;ndash; any attempt to delete another record for Betty will throw
an &lt;code&gt;IntegrityError&lt;/code&gt;. Luckily, there&amp;rsquo;s a better way.&lt;/p&gt;

&lt;h2 id=&#34;the-null-solution&#34;&gt;The Null Solution&lt;/h2&gt;

&lt;p&gt;At the database level, there&amp;rsquo;s a straightforward solution to this problem
(though I didn&amp;rsquo;t learn about it until a few months ago): store soft-deleted
records with nulls in the &lt;code&gt;alive&lt;/code&gt; column. As mandated by the ANSI SQL
standard, MySQL, Postgres, and SQLite treat each null as a unique snowflake.&lt;/p&gt;

&lt;p&gt;However, creating a Django field with this behavior is a little tricky because
we want to forbid &lt;code&gt;False&lt;/code&gt; values in the database (allowing only &lt;code&gt;True&lt;/code&gt; and
&lt;code&gt;NULL&lt;/code&gt;).  Here&amp;rsquo;s what I came up with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from django.db import models

class LiveField(models.Field):
    &#39;&#39;&#39;Similar to a BooleanField, but stores False as NULL.

    &#39;&#39;&#39;
    description = &#39;Soft-deletion status&#39;
    __metaclass__ = models.SubfieldBase

    def __init__(self):
        super(LiveField, self).__init__(default=True, null=True)

    def get_internal_type(self):
        # Create DB column as though for a NullBooleanField.
        return &#39;NullBooleanField&#39;

    def get_prep_value(self, value):
        # Convert in-Python value to value we&#39;ll store in DB
        if value:
            return 1
        return None

    def to_python(self, value):
        # Misleading name, since type coercion also occurs when
        # assigning a value to the field in Python.
        return bool(value)

    def get_prep_lookup(self, lookup_type, value):
        # Filters with .alive=False won&#39;t work, so
        # raise a helpful exception instead.
        if lookup_type == &#39;exact&#39; and not value:
            msg = (&amp;quot;%(model)s doesn&#39;t support filters with &amp;quot;
                &amp;quot;%(field)s=False. Use a filter with &amp;quot;
                &amp;quot;%(field)s=None or an exclude with &amp;quot;
                &amp;quot;%(field)s=True instead.&amp;quot;)
            raise TypeError(msg % {
                &#39;model&#39;: self.model.__name__,
                &#39;field&#39;: self.name})

        return super(LiveField, self).get_prep_lookup(lookup_type, value)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a drop-in replacement for Django&amp;rsquo;s stock &lt;code&gt;BooleanField&lt;/code&gt; in the
abstract model above, but under the covers it stores falsy values as nulls. At
Hearsay, we just finished migrating all our models to use &lt;code&gt;LiveField&lt;/code&gt;, and
it&amp;rsquo;s been a huge help already &amp;ndash; having the option to simultaneously support
soft-deletion and uniqueness constraints keeps our application code &lt;em&gt;and&lt;/em&gt; our
data clean.&lt;/p&gt;

&lt;p&gt;Curious how to test your shiny new soft-deletion field? Check out my post on
&lt;a href=&#34;http://localhost:1313/post/testing-django-fields&#34;&gt;testing custom Django fields&lt;/a&gt; for some tips, or
check out the actual test setup on
&lt;a href=&#34;https://github.com/hearsaycorp/django-livefield&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Language Use on GitHub</title>
      <link>http://localhost:1313/post/language-use-on-github/</link>
      <pubDate>Sun, 10 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/language-use-on-github/</guid>
      <description>

&lt;p&gt;Do CoffeeScript aficionados write less vanilla JavaScript? Do systems hackers
using Go also do front-end work in ActionScript? Most programmers have some
intuitions about these questions&amp;mdash;&lt;em&gt;but what does the data say&lt;/em&gt;? Spurred on by
a six-month-old Twitter &lt;a href=&#34;https://twitter.com/misc/status/235167513833525249&#34;&gt;conversation&lt;/a&gt;, I decided to find out.
Using data from 2012, I charted the relationships between the 25 most popular
languages on GitHub: &lt;img
src=&#34;/img/post/language-use-on-github/spearman_language_correlation.svg&#34;
alt=&#34;Language Correlation on GitHub&#34; class=&#34;fill-column&#34;&gt;&lt;/p&gt;

&lt;p&gt;Each square in the chart measures the &lt;a href=&#34;http://en.wikipedia.org/wiki/Spearman%27s_rank_correlation_coefficient&#34;&gt;rank correlation&lt;/a&gt;
between two languages; positive correlations are in blue, and negative
correlations are in red. A little more than halfway down the first column is a
medium-red square showing the correlation between Go and ActionScript. Because
the square is red, we know that as users write more Go, they write less
ActionScript. From the intensity of the red, we know that this rule of thumb is
fairly reliable. Rank correlations are symmetric, so ActionScript fans also
write less Go (and there&amp;rsquo;s an identically-colored square in the bottom row to
show it). Take a moment to find your favorite languages, then read on for the
details!&lt;/p&gt;

&lt;h2 id=&#34;data-collection&#34;&gt;Data Collection&lt;/h2&gt;

&lt;p&gt;GitHub&amp;rsquo;s own &lt;a href=&#34;https://github.com/briandoll&#34;&gt;Brian Doll&lt;/a&gt; published a &lt;a href=&#34;https://gist.github.com/briandoll/e0637fff9c8eec988528&#34;&gt;data set&lt;/a&gt;
titled &amp;ldquo;Programming Language Correlations,&amp;rdquo; but as an astute commenter pointed
out, it&amp;rsquo;s really a set of conditional probabilities. For our question,
that&amp;rsquo;s an important distinction &amp;ndash; while conditional probabilities let us say,
&amp;ldquo;87.9% of CoffeeScript programmers also code in Ruby,&amp;rdquo; they &lt;em&gt;don&amp;rsquo;t&lt;/em&gt; allow us to
say, &amp;ldquo;People who write more CoffeeScript also tend to write more Ruby.&amp;rdquo; To
tackle our question, we&amp;rsquo;ll need access to some more granular data.&lt;/p&gt;

&lt;p&gt;Rather than banging on the API, we can use the &lt;a href=&#34;http://www.githubarchive.org/&#34;&gt;GitHub
Archive&lt;/a&gt;. This fantastic resource archives every public GitHub
event and makes the whole data set accessible via &lt;a href=&#34;https://developers.google.com/bigquery/&#34;&gt;Google BigQuery&lt;/a&gt;.
BigQuery has a web-based console and a comfortably SQL-like query language, so
it&amp;rsquo;s easy to get the data we need (all the code in this post is also in a
single &lt;a href=&#34;https://gist.github.com/akshayjshah/4772174&#34;&gt;Gist&lt;/a&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select actor, repository_language, count(repository_language) as pushes
from [githubarchive:github.timeline]
where type=&#39;PushEvent&#39;
    and repository_language != &#39;&#39;
    and PARSE_UTC_USEC(created_at) &amp;gt;= PARSE_UTC_USEC(&#39;2012-01-01 00:00:00&#39;)
    and PARSE_UTC_USEC(created_at) &amp;lt; PARSE_UTC_USEC(&#39;2013-01-01 00:00:00&#39;)
group by actor, repository_language;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The results of this query are in a stacked format, where each combination of
user and language is on a separate row:&lt;/p&gt;

&lt;table class=&#34;fill-column center&#34;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;actor&lt;/th&gt;
      &lt;th&gt;repository_language&lt;/th&gt;
      &lt;th&gt;pushes&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Joe&lt;/td&gt;
      &lt;td&gt;CoffeeScript&lt;/td&gt;
      &lt;td&gt;24&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Joe&lt;/td&gt;
      &lt;td&gt;Ruby&lt;/td&gt;
      &lt;td&gt;72&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Sue&lt;/td&gt;
      &lt;td&gt;CoffeeScript&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Joe&lt;/td&gt;
      &lt;td&gt;Go&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Sue&lt;/td&gt;
      &lt;td&gt;Ruby&lt;/td&gt;
      &lt;td&gt;48&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Stacked formats are often convenient in database schemas, but they&amp;rsquo;re not very
useful for analysis. We&amp;rsquo;d rather unstack the data so that there&amp;rsquo;s one row per
user and one column per language:&lt;/p&gt;

&lt;table class=&#34;fill-column center&#34;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;actor&lt;/th&gt;
      &lt;th&gt;CoffeeScript&lt;/th&gt;
      &lt;th&gt;Go&lt;/th&gt;
      &lt;th&gt;Ruby&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Joe&lt;/td&gt;
      &lt;td&gt;24&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;72&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Sue&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;48&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;With the help of the brilliant &lt;a href=&#34;http://pandas.pydata.org/&#34;&gt;pandas&lt;/a&gt; library, we can perform this
transformation with one Python command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd

pushes = pd.read_csv(&#39;stacked_language_by_user.csv&#39;).pivot(
    index=&#39;actor&#39;,
    columns=&#39;repository_language&#39;,
    values=&#39;pushes&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Exporting these results from BigQuery was an enormous pain (and required a paid
account), so I&amp;rsquo;ll keep a zipped copy of the &lt;a href=&#34;http://localhost:1313/img/post/language-use-on-github/stacked_language_by_user.zip&#34;&gt;stacked&lt;/a&gt; and
&lt;a href=&#34;http://localhost:1313/img/post/language-use-on-github/unstacked_language_by_user.zip&#34;&gt;unstacked&lt;/a&gt; results available.&lt;/p&gt;

&lt;h2 id=&#34;analysis&#34;&gt;Analysis&lt;/h2&gt;

&lt;p&gt;GitHub recognizes &lt;em&gt;lots&lt;/em&gt; of different languages, including some that are fairly
obscure, so our unstacked data set has too many columns to visualize. Let&amp;rsquo;s
just keep the most popular languages:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np

popular = pushes.select(lambda x: np.sum(pushes[x]) &amp;gt; 50000, axis=1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that our data&amp;rsquo;s formatted and filtered, it&amp;rsquo;s time to actually calculate our
correlation matrix and draw a plot. Again, pandas makes the number-crunching
ridiculously simple:
&lt;label for=&#34;mn-update-fillna&#34; class=&#34;margin-toggle&#34;&gt;&amp;#8853;&lt;/label&gt;
&lt;input type=&#34;checkbox&#34; id=&#34;mn-update-fillna&#34; class=&#34;margin-toggle&#34;&gt;
&lt;span class=&#34;marginnote&#34;&gt;
    &lt;em&gt;Update:&lt;/em&gt; 
As &lt;a href=&#34;http://conjugateprior.org/&#34;&gt;conjugateprior&lt;/a&gt;
noted in the now-defunct comments, this calculation ignores any rows with missing
data (for example, the Python-Ruby correlation ignores any users who haven&amp;rsquo;t
used both Python and Ruby). We could fill the missing values with zeroes (which
Corey has already done&amp;mdash;check out his &lt;a
href=&#34;https://gist.github.com/coyotebush/5379476&#34;&gt;updated code&lt;/a&gt; and &lt;a
href=&#34;http://coreyford.name/2013/04/13/github-language-correlations.html&#34;&gt;plot&lt;/a&gt;),
or we could also calculate significance for each correlation.

&lt;/span&gt;
&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import matplotlib.pyplot as plt

def plot_correlation(dataframe, filename, title=&#39;&#39;, corr_type=&#39;&#39;):
    lang_names = dataframe.columns.tolist()
    tick_indices = np.arange(0.5, len(lang_names) + 0.5)
    plt.figure()
    plt.pcolor(dataframe.values, cmap=&#39;RdBu&#39;, vmin=-1, vmax=1)
    colorbar = plt.colorbar()
    colorbar.set_label(corr_type)
    plt.title(title)
    plt.xticks(tick_indices, lang_names, rotation=&#39;vertical&#39;)
    plt.yticks(tick_indices, lang_names)
    plt.savefig(filename)

spearman_corr = popular.corr(method=&#39;spearman&#39;)
plot_correlation(
    spearman_corr,
    &#39;spearman_language_correlation.svg&#39;,
    title=&#39;2012 GitHub Language Correlations&#39;,
    corr_type=&#39;Spearman\&#39;s Rank Correlation&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s better to use &lt;a href=&#34;http://en.wikipedia.org/wiki/Spearman%27s_rank_correlation_coefficient&#34;&gt;Spearman&amp;rsquo;s rank correlation&lt;/a&gt; here
instead of the usual &lt;a href=&#34;http://en.wikipedia.org/wiki/Pearson_product-moment_correlation_coefficient&#34;&gt;Pearson correlation&lt;/a&gt; for two
reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We don&amp;rsquo;t really care whether the relationship between languages is strictly
linear.&lt;/li&gt;
&lt;li&gt;There are quite a few outliers in our data set, and rank correlations are
less distorted by these outliers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If that doesn&amp;rsquo;t convince you, it&amp;rsquo;s easy to calculate the Pearson correlation &amp;ndash;
it&amp;rsquo;s the default in pandas, so removing the &lt;code&gt;method=&#39;spearman&#39;&lt;/code&gt; above should
do the trick. If you&amp;rsquo;re impatient, you can just peek at the
&lt;a href=&#34;http://localhost:1313/img/post/language-use-on-github/pearson_language_correlation.svg&#34;&gt;results&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;h2 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h2&gt;
&lt;img src=&#34;http://localhost:1313/img/post/language-use-on-github/spearman_language_correlation.svg&#34;
alt=&#34;Language Correlation on GitHub&#34; class=&#34;fill-column&#34;&gt;&lt;/p&gt;

&lt;p&gt;The most striking thing about this chart is its &lt;em&gt;blueness&lt;/em&gt;. Despite our
tribalism, writing scads of C# doesn&amp;rsquo;t make programmers any less likely to hack
on some R. Even PHP, perhaps the &lt;a href=&#34;http://me.veekun.com/blog/2012/04/09/php-a-fractal-of-bad-design/&#34;&gt;most hated&lt;/a&gt; programming language on
earth, has a slight positive correlation with Haskell. After seeing so many
flamewars in forums, on mailing lists, and even in person, I expected language
communities to be more insular. I&amp;rsquo;m particularly surprised by the positive
correlations between the languages associated with proprietary platforms (C#,
Objective-C, and ActionScript) and the traditionally open-source languages.&lt;/p&gt;

&lt;p&gt;Not surprisingly, special-purpose languages are the exception to this rule. R,
Matlab, and Puppet have more strong correlations (both positive and negative)
than the norm, likely because of their niche roles in data analysis and devops.&lt;/p&gt;

&lt;p&gt;Like any analysis project, this one comes with a few caveats:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GitHub pushes aren&amp;rsquo;t a perfect measure of activity. Then again, neither are
commits, lines of code changed, or anything else I&amp;rsquo;ve heard of.&lt;/li&gt;
&lt;li&gt;This data only considers public projects on GitHub, many of which are open
source. Open-source programmers, and projects, may behave quite differently
from their closed-source counterparts.&lt;/li&gt;
&lt;li&gt;Correlation isn&amp;rsquo;t causation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I&amp;rsquo;ve only scratched the surface here &amp;ndash; if you&amp;rsquo;ve got some ideas, &lt;a href=&#34;mailto:akshay@akshayshah.org&#34;&gt;let me
know&lt;/a&gt;!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>An Audible Literacy Filter</title>
      <link>http://localhost:1313/post/audible-literacy-test/</link>
      <pubDate>Mon, 22 Oct 2012 21:54:58 -0700</pubDate>
      
      <guid>http://localhost:1313/post/audible-literacy-test/</guid>
      <description>

&lt;p&gt;&lt;div class=&#34;epigraphs&#34;&gt;
    &lt;blockquote&gt;
        &lt;p&gt;If it takes someone more than 20 years to notice how to properly use &amp;ldquo;it&amp;rsquo;s,&amp;rdquo;
then that&amp;rsquo;s not a learning curve I&amp;rsquo;m comfortable with. So, even in this
hyper-competitive market, I will pass on a great programmer who cannot
write.&lt;/p&gt;

        &lt;footer&gt;Kyle Wiens on &lt;cite&gt;&lt;a href=&#34;http://blogs.hbr.org/cs/2012/07/i_wont_hire_people_who_use_poo.html&#34;&gt;The Harvard Business Review Blog&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
    &lt;/blockquote&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Especially among technical folks, writing is an underrated skill. Kyle Wiens
hit the front page of Hacker News by blogging about his use of a writing test
to screen engineering applicants; while I&amp;rsquo;m not completely convinced that &amp;ldquo;at
its core, code is prose,&amp;rdquo; I do believe that facility with prose is both
valuable in itself and a good proxy for attention to detail. Many authors have
made the former point, often &lt;a href=&#34;http://www.readwriteweb.com/start/2012/04/the-dirty-dozen-grammatical-er.php&#34;&gt;specifically addressing startups&lt;/a&gt;, and Kyle
himself does an excellent job making the latter connection. However, not all of
us are willing (or allowed) to administer a writing test as part of the
interview process. For the rushed curmudgeon, I offer a shortcut: focus on the
candidate&amp;rsquo;s use of the word &amp;ldquo;myself.&amp;rdquo;&lt;/p&gt;

&lt;h2 id=&#34;an-easy-audible-grammar-test&#34;&gt;An Easy, Audible Grammar Test&lt;/h2&gt;

&lt;p&gt;Many guides to grammar gaffes focus on homophones&amp;ndash;pairs of words that
have different meanings but identical pronunciations.  But relying on
homophones to sort the literate wheat from the unemployable chaff is difficult
precisely because they sound alike; using homophones to detect your candidate&amp;rsquo;s
illiteracy requires a written test.  (The most obliging candidates display
their ignorance in a resume or cover letter, but not everyone is so
forthright.) Focusing on &amp;ldquo;myself&amp;rdquo; avoids this trap, since misuse is easily
flagged in speech and in writing.&lt;/p&gt;

&lt;p&gt;Like &amp;ldquo;whom,&amp;rdquo; &amp;ldquo;myself&amp;rdquo; is tricky because correct usage demands some knowledge of
formal grammar. It&amp;rsquo;s only appropriate in two cases:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When the speaker is both the subject and the object of a verb, e.g., &amp;ldquo;Oops, I must have
sent that email to myself.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;When used for emphasis, e.g., &amp;ldquo;I fixed that bug myself.&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A good rule of thumb is to be suspicious of any sentence that includes &amp;ldquo;myself&amp;rdquo;
but not &amp;ldquo;I.&amp;rdquo; Most importantly, &amp;ldquo;myself&amp;rdquo; is &lt;em&gt;not&lt;/em&gt; just a fancy substitute for &amp;ldquo;me&amp;rdquo; or
&amp;ldquo;I.&amp;rdquo; These are two incorrect, but sadly common, constructions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&amp;ldquo;Feel free to bring up any concerns with Bob or myself.&amp;rdquo; (Replace with &amp;ldquo;Bob
or me.&amp;ldquo;)&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Jane and myself will go to the meeting.&amp;rdquo; (Replace with &amp;ldquo;Jane and I.&amp;rdquo;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And there you have it&amp;ndash;a simple, audible grammar test. Its
false-positive rate is low, and it&amp;rsquo;s particularly good at detecting the overly
self-important candidate (or co-worker).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Zero to Code Monkey</title>
      <link>http://localhost:1313/post/zero-to-code-monkey/</link>
      <pubDate>Mon, 24 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/zero-to-code-monkey/</guid>
      <description>

&lt;p&gt;Last year, I&amp;rsquo;d never have called myself a programmer. Sure, I&amp;rsquo;d dabbled a bit
here and there: I took a few computer science courses in high school and
college, cobbled together some Excel macros and one-off data processing scripts
in medical school, and hand-wrote two websites in the late 90s. I&amp;rsquo;d never
written code daily, even while taking computer science classes, and most
importantly, I&amp;rsquo;d never collaborated on a software project. At best, I was a
dilettante.&lt;/p&gt;

&lt;p&gt;Nine months later, I&amp;rsquo;m on a different plane: I&amp;rsquo;m still no expert, but I&amp;rsquo;m
definitely a programmer (or at least a code monkey). Writing code every day is
an important part of my job, and I &lt;em&gt;love&lt;/em&gt; it. If you&amp;rsquo;re interested in learning
to code, especially in Python, I hope my story helps you get started faster.&lt;/p&gt;

&lt;h2 id=&#34;syntax-is-easy&#34;&gt;Syntax Is Easy&lt;/h2&gt;

&lt;p&gt;Oddly enough, learning the syntax of a programming language &amp;mdash; the rules
for assembling words, curly braces, backslashes, and all the other
typographical flotsam in the corners of your keyboard into working code &amp;mdash;
was relatively easy. &lt;a href=&#34;http://www.python.org/about/&#34;&gt;Python&lt;/a&gt; is particularly straightforward, and Zed Shaw&amp;rsquo;s
&lt;a href=&#34;http://learnpythonthehardway.org/&#34;&gt;Learn Python the Hard Way&lt;/a&gt; taught me the basics in a single weekend.
Experimenting in an &lt;a href=&#34;http://repl.it/&#34; title=&#34;repl.it&#34;&gt;interactive environment&lt;/a&gt; was very helpful at this
stage, since the interpreter caught all my mistakes, printed a helpful error
message, and let me try again right away. Whenever I didn&amp;rsquo;t understand where
I&amp;rsquo;d gone wrong, pasting the error message verbatim into Google always turned up
a relevant answer.&lt;/p&gt;

&lt;p&gt;Only a few days in, I was able to exercise my new skills by writing a to-do
manager like &lt;a href=&#34;http://stevelosh.com/projects/t/&#34;&gt;Steve Losh&amp;rsquo;s t&lt;/a&gt; &amp;mdash; and it &lt;em&gt;actually worked&lt;/em&gt;.  Writing
even a simple utility that functioned exactly as I wanted it to was hugely
empowering, and using my little program every day kept me excited about
learning. Emulating t had an unanticipated, but immensely helpful, side effect:
it let me compare my efforts to &lt;a href=&#34;https://bitbucket.org/sjl/t/src/&#34;&gt;the actual t source code&lt;/a&gt;, which is
also written in Python. Taking the time to really understand how Steve&amp;rsquo;s code
worked (and why it was much, much better than mine) accelerated my learning
dramatically.&lt;/p&gt;

&lt;h2 id=&#34;computer-science-is-practical&#34;&gt;Computer Science Is Practical&lt;/h2&gt;

&lt;p&gt;Of course, what&amp;rsquo;s a to-do manager without projects, sub-projects, and maybe
even sub-sub-projects? Naively, I assumed that adding this feature to my little
utility would be a quick one-hour project. When I sat down to start
writing, though, I realized that I had no clue how to handle potentially
infinite project nesting. A little research (leavened with some hazy memories
from school) revealed that managing data with this sort of parent-child
relationship is, unsurprisingly, a well-studied problem in computer science,
and after a few nights of experimenting and reading I managed to add projects
to my to-do list manager.&lt;/p&gt;

&lt;p&gt;Along the way, I realized that I&amp;rsquo;d always be a few steps behind until I learned
some basic computer science: most common problems have established solutions,
and my complete ignorance of those solutions was forcing me to reinvent the
wheel (poorly) at every turn. It&amp;rsquo;s a little like trying to organize thousands
of loose papers without using a file cabinet; I&amp;rsquo;d probably come up with some
sort of workable system eventually, but why go through all that pain when
there&amp;rsquo;s a good solution that&amp;rsquo;s widely available? To push the analogy
further, file cabinets also have a large ecosystem of standard add-ons
designed to solve particular problems &amp;mdash; it&amp;rsquo;s easy to get cabinets with
built-in indexing systems, horizontal drawers, or wheels, for example.
Similarly, it&amp;rsquo;s easy to find variations of the basic computer science building
blocks that are optimized for particular applications.&lt;/p&gt;

&lt;p&gt;Nine months isn&amp;rsquo;t enough to make anyone an expert in computer science, but
there are a &lt;em&gt;lot&lt;/em&gt; of excellent courses available free online. I started with
MIT&amp;rsquo;s &lt;a href=&#34;http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/&#34;&gt;Introduction to Computer Science and Programming&lt;/a&gt; because it&amp;rsquo;s
taught in Python, doesn&amp;rsquo;t assume any prior knowledge, and moves slowly enough
for me to watch while riding the train and keeping an eye out for my stop. I&amp;rsquo;m
not sure what I&amp;rsquo;ll tackle next, but I&amp;rsquo;m leaning towards continuing the MIT
undergraduate sequence.&lt;/p&gt;

&lt;h2 id=&#34;craftsmanship-is-crucial&#34;&gt;Craftsmanship Is Crucial&lt;/h2&gt;

&lt;p&gt;A few days after I started watching the MIT lectures, I switched jobs and began
writing code at work. This was, to say the least, a big transition: I went from
being the sole author of a hundred-line program to working with a team of real
engineers building a real web application. The standard for the correctness of
my code went up, but more importantly, so did the standards for its
&lt;em&gt;readability&lt;/em&gt; and &lt;em&gt;maintainability&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Even with reams of well-written code (and the inevitable bits of crufty legacy
code) to learn from, it took me months to really understand why anyone would
prioritize anything other than accurate output. &amp;ldquo;It works right now,&amp;rdquo; I&amp;rsquo;d think to
myself, &amp;ldquo;so why would anyone spend another week just making it look pretty?&amp;rdquo;
That attitude changed the first time I had to add some functionality to a small
piece of code I&amp;rsquo;d written a few months earlier. Even as the original author, I
was completely baffled &amp;mdash; I&amp;rsquo;d named every variable &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;sbgs&lt;/code&gt;,
&lt;code&gt;data&lt;/code&gt; (yes, really), or something equally useless, and now I couldn&amp;rsquo;t make
heads or tails of any of it. I ended up scrapping the whole file, starting from
scratch, and feeling lucky that none of the many bugs in my old code had seen
the light of day.&lt;/p&gt;

&lt;p&gt;Needless to say, I&amp;rsquo;m now a convert. I&amp;rsquo;m getting better at giving functions and
variables meaningful names. I plan my code more carefully. I&amp;rsquo;m a little more
comfortable with object-oriented programming, and I&amp;rsquo;m keeping global variables
to a minimum. More abstractly, I&amp;rsquo;m slowly learning how to hide complexity so
that other people can treat my code as a pluggable component. I want to take
pride not just in my code&amp;rsquo;s functionality, but in its readability, its
cleanliness, and its aesthetics &amp;mdash; in short, in its craftsmanship.&lt;/p&gt;

&lt;p&gt;Taking a few months to focus on something other than basic computer science is
a luxury I can afford only because Python provides an off-the-shelf version of
most common building blocks. Since I don&amp;rsquo;t absolutely need to know, for
example, how each of the many common sorting algorithms works (though it would
probably be helpful), I can afford to put reading on hold for a little while to
become a better craftsman. I&amp;rsquo;ve spent most of this time reading &lt;a href=&#34;http://www.amazon.com/Code-Complete-Practical-Handbook-Construction/dp/0735619670&#34;&gt;Code
Complete&lt;/a&gt;, mostly because Jeff Atwood describes it as &amp;ldquo;&lt;a href=&#34;http://www.codinghorror.com/blog/2004/02/recommended-reading-for-developers.html&#34;&gt;the Joy of Cooking
for software developers&lt;/a&gt;.&amp;rdquo; I&amp;rsquo;ll probably still make the same
rookie mistakes, but I hope that this early investment will help me learn from
my mistakes faster.&lt;/p&gt;

&lt;h2 id=&#34;what-next&#34;&gt;What Next?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ll finish Code Complete this week, but I&amp;rsquo;m not sure where I should invest my
time next. I could:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Review linear algebra. I&amp;rsquo;m hoping to pick up a few machine learning projects
soon, so dusting off my math skills would be helpful.&lt;/li&gt;
&lt;li&gt;Start another computer science course or read an introductory book on data
structures and algorithms. Along with learning more math, this is probably
the best long-term use of my time.&lt;/li&gt;
&lt;li&gt;Learn the Python numerical toolkit in more depth. This is definitely the most
practical option, but I think it has the least enduring value.&lt;/li&gt;
&lt;li&gt;Read more about software craftsmanship and project management. I have copies
of &lt;a href=&#34;http://pragprog.com/book/tpp/the-pragmatic-programmer&#34;&gt;The Pragmatic Programmer&lt;/a&gt; and &lt;a href=&#34;http://www.amazon.com/The-Mythical-Man-Month-Engineering-Anniversary/dp/0201835959&#34;&gt;The Mythical Man-Month&lt;/a&gt;, but I&amp;rsquo;m
inclined to focus more on hard skills for the next few months.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you&amp;rsquo;ve read this far, I&amp;rsquo;d appreciate your input! Send me an
&lt;a href=&#34;mailto:akshay@akshayshah.org&#34;&gt;email&lt;/a&gt; and let me know where I went wrong.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hakyll and Bootstrap</title>
      <link>http://localhost:1313/post/hakyll-and-bootstrap/</link>
      <pubDate>Sat, 04 Aug 2012 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/hakyll-and-bootstrap/</guid>
      <description>

&lt;p&gt;Though
&lt;label for=&#34;mn-update-failure&#34; class=&#34;margin-toggle&#34;&gt;&amp;#8853;&lt;/label&gt;
&lt;input type=&#34;checkbox&#34; id=&#34;mn-update-failure&#34; class=&#34;margin-toggle&#34;&gt;
&lt;span class=&#34;marginnote&#34;&gt;
    &lt;em&gt;Update:&lt;/em&gt; 
It&#39;s probably no surprise, but diving
straight into Haskell wasn&#39;t the smoothest transition; without a better
understanding of the language as a whole, I spent more time fiddling with the
code than writing. I experimented with a few different site generation tools,
including a custom Python script, before settling on Steve Francia&#39;s &lt;a
href=&#34;http://gohugo.io/&#34; title=&#34;Hugo: A Fast &amp; Modern Static Website
Generator&#34;&gt;Hugo&lt;/a&gt;.

&lt;/span&gt;

I&amp;rsquo;ve run a few &lt;a href=&#34;http://www.wordpress.com&#34; title=&#34;WordPress&#34;&gt;Wordpress&lt;/a&gt; sites in the past, I&amp;rsquo;ve always found the
software irritating to use. In particular, I &lt;em&gt;loathe&lt;/em&gt; the composer&amp;ndash;the
rich text editor never works quite as I expect it to, and the &lt;abbr
class=&#34;initialism&#34;&gt;HTML&lt;/abbr&gt; editor mangles my markup without warning. The
installation is dead simple, the theme support is fantastic, and I love &lt;a href=&#34;http://ma.tt/tag/gpl/&#34; title=&#34;Matt Mullenweg on the GPL&#34;&gt;Matt
Mullenweg&amp;rsquo;s support of free software&lt;/a&gt;, but Wordpress just isn&amp;rsquo;t for me.
At the same time, I don&amp;rsquo;t miss hand-coding entire sites; I&amp;rsquo;ve done that exactly
twice, and maintaining scads of duplicated markup is a nightmare I don&amp;rsquo;t care
to repeat.  Since I&amp;rsquo;m starting this site with a clean slate, I have the luxury
of choosing whatever tools I like; after looking at everything from &lt;a href=&#34;http://drupal.org/&#34; title=&#34;Drupal&#34;&gt;Drupal&lt;/a&gt;
to &lt;a href=&#34;https://www.tumblr.com/&#34; title=&#34;Tumblr&#34;&gt;Tumblr&lt;/a&gt;, I decided to keep things simple and build with &lt;a href=&#34;http://jaspervdj.be/hakyll/&#34; title=&#34;Hakyll&#34;&gt;Hakyll&lt;/a&gt; and
&lt;a href=&#34;http://twitter.github.com/bootstrap/&#34; title=&#34;Twitter Bootstrap&#34;&gt;Bootstrap&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;hakyll-static-site-generation&#34;&gt;Hakyll: Static Site Generation&lt;/h2&gt;

&lt;p&gt;Hakyll is a static site generator, which means that it&amp;rsquo;s only a few short steps
away from writing markup by hand. Those few steps make all the difference,
though&amp;ndash;I can still control exactly what the final &lt;abbr&gt;HTML&lt;/abbr&gt; will look
like, but Hakyll lets me write articles in &lt;a href=&#34;http://daringfireball.net/projects/markdown/&#34; title=&#34;Markdown&#34;&gt;Markdown&lt;/a&gt; and use templates for
site-wide elements like navigation and footers.  Static sites are all the rage
among geeks these days, so &lt;a href=&#34;http://nanoc.stoneship.org/docs/1-introduction/&#34; title=&#34;Nanoc Documentation&#34;&gt;a lot&amp;rsquo;s&lt;/a&gt; already &lt;a href=&#34;http://stevelosh.com/blog/2010/01/moving-from-django-to-hyde/&#34; title=&#34;Steve Losh: Moving from Django to Hyde&#34;&gt;been written&lt;/a&gt;
about their technical advantages.  In short, static sites are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;fast by default, even on inexpensive hardware;&lt;/li&gt;
&lt;li&gt;immune to many common security exploits;&lt;/li&gt;
&lt;li&gt;easily saved and versioned; and&lt;/li&gt;
&lt;li&gt;editable offline.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most importantly for me, Hakyll is comfortable. I can write templates and posts
in &lt;a href=&#34;http://stevelosh.com/blog/2010/09/coming-home-to-vim/&#34; title=&#34;Steve Losh: Coming Home to Vim&#34;&gt;vim&lt;/a&gt;, keep versions and branches in &lt;a href=&#34;http://git-scm.com/&#34; title=&#34;Git&#34;&gt;git&lt;/a&gt;, and generally work with
whatever text manipulation tools make me happy. Hakyll even comes with a
built-in webserver, so it&amp;rsquo;s easy to see a live preview of any changes I&amp;rsquo;m
making. Since writing on this site is supposed to be a fun side project,
comfortable tools are priority zero.&lt;/p&gt;

&lt;p&gt;Building a site without a database isn&amp;rsquo;t all roses and puppies, though. There&amp;rsquo;s
no easy way for me to include an automated &amp;ldquo;Popular Posts&amp;rdquo; widget in the
sidebar, for example, and any future search widgets will need to rely on an
external search engine. Most importantly, it&amp;rsquo;s impossible for me to store and
manage reader comments. Services like &lt;a href=&#34;http://disqus.com&#34; title=&#34;Disqus&#34;&gt;Disqus&lt;/a&gt; and &lt;a href=&#34;http://intensedebate.com&#34; title=&#34;IntenseDebate&#34;&gt;IntenseDebate&lt;/a&gt; offer
easy Javascript-based workarounds, but I&amp;rsquo;ll need to do a little more due
diligence before I&amp;rsquo;m comfortable trusting them with critical data.&lt;/p&gt;

&lt;p&gt;Hakyll also has its own set of challenges, mostly because it&amp;rsquo;s written and
configured in &lt;a href=&#34;http://www.haskell.org/haskellwiki/Haskell&#34; title=&#34;HaskellWiki&#34;&gt;Haskell&lt;/a&gt;. To put it mildly, I&amp;rsquo;m a Haskell neophyte&amp;ndash;I&amp;rsquo;ve been
interested in the language for months, but haven&amp;rsquo;t done anything more than a
few &lt;a href=&#34;http://projecteuler.net/&#34; title=&#34;Project Euler&#34;&gt;Project Euler&lt;/a&gt; questions. Since I don&amp;rsquo;t have a strong background in
category theory, monads and arrows are &lt;em&gt;blowing my mind&lt;/em&gt;.  There&amp;rsquo;s something
really amazing and elegant going on, but I&amp;rsquo;m only catching glimpses of it
between compiler errors. Nevertheless, the Hakyll &lt;a href=&#34;http://jaspervdj.be/hakyll/tutorials.html&#34; title=&#34;Hakyll Tutorials&#34;&gt;documentation&lt;/a&gt;
is excellent, the &lt;a href=&#34;http://groups.google.com/group/hakyll&#34; title=&#34;Hakyll Google Group&#34;&gt;mailing list&lt;/a&gt; is active, and the
&lt;a href=&#34;http://jaspervdj.be&#34; title=&#34;Jasper Van der Jeugt&#34;&gt;author&lt;/a&gt; is exceptionally helpful, so my first foray into practical
functional programming has been more enlightening than infuriating.&lt;/p&gt;

&lt;h2 id=&#34;bootstrap-clean-design-no-fuss&#34;&gt;Bootstrap: Clean Design, No Fuss&lt;/h2&gt;

&lt;p&gt;I have trouble matching my clothing, let alone the dozens of small elements
that make up a website, so creating an attractive design for my new site was a
daunting task. Luckily, nobody needs to see my first efforts&amp;ndash;I decided to use
Twitter&amp;rsquo;s &lt;a href=&#34;http://twitter.github.com/bootstrap/&#34; title=&#34;Twitter Bootstrap&#34;&gt;Bootstrap&lt;/a&gt; framework instead. It&amp;rsquo;s clean, attractive, and
mobile-friendly, and it&amp;rsquo;s teaching me some of &lt;abbr&gt;HTML&lt;/abbr&gt;5&amp;rsquo;s new tricks.
&lt;a href=&#34;http://lesscss.org&#34; title=&#34;{less}&#34;&gt;{less}&lt;/a&gt;, the &lt;abbr&gt;CSS&lt;/abbr&gt; meta-language Boostrap uses, is also
wonderful: it&amp;rsquo;s close enough to vanilla &lt;abbr&gt;CSS&lt;/abbr&gt; that it&amp;rsquo;s easy to
learn, but it makes my stylesheets much more modular and consistent.&lt;/p&gt;

&lt;p&gt;While I haven&amp;rsquo;t tweaked Bootstrap&amp;rsquo;s default styling much, I &lt;em&gt;had&lt;/em&gt; to do
something about the fonts. I like Helvetica, especially on visually intense
marketing sites&amp;ndash;but Bootstrap&amp;rsquo;s tiny default font size combined with
Helvetica&amp;rsquo;s clinical modernism made blocks of text downright hostile. After a few
hours poking through &lt;a href=&#34;http://www.google.com/webfonts&#34; title=&#34;Google Web Fonts&#34;&gt;Google Web Fonts&lt;/a&gt; and testing different styles,
I settled on &lt;a href=&#34;http://www.omnibus-type.com/&#34; title=&#34;Omnibus Type&#34;&gt;Omnibus Type&amp;rsquo;s&lt;/a&gt; &lt;a href=&#34;http://www.google.com/webfonts/specimen/Rosario&#34; title=&#34;Rosario&#34;&gt;Rosario&lt;/a&gt;. To my eye, it
manages to be a little more playful and human than Helvetica without
distracting from the words themselves.&lt;/p&gt;

&lt;p&gt;My efforts to choose a different color scheme, though, have been a complete
failure. The defaults are nice enough, but they lack soul, and my efforts to
change them usually end in a neon-tinted nightmare. There&amp;rsquo;s hope on the
horizon, though&amp;ndash;I just read Ian Taylor&amp;rsquo;s &amp;ldquo;&lt;a href=&#34;http://ianstormtaylor.com/design-tip-never-use-black/&#34; title=&#34;Design Tip: Never User Black&#34;&gt;Never Use Black&lt;/a&gt;,&amp;rdquo;
and I may try mixing some blue or red into the default grays.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not much of a programmer or a designer, so I&amp;rsquo;m always in the market for
suggestions! If coding&amp;rsquo;s your thing, take a look at the &lt;a href=&#34;http://github.com/akshayjshah/akshayjshah.github.io&#34;&gt;source code on
GitHub&lt;/a&gt;; otherwise, send
me a &lt;a href=&#34;http://twitter.com/akshayshah&#34;&gt;tweet&lt;/a&gt; and let me know what you think.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Colophon</title>
      <link>http://localhost:1313/colophon/</link>
      <pubDate>Wed, 01 Aug 2012 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/colophon/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m Akshay Shah,
&lt;label for=&#34;mn-akshay-pic&#34; class=&#34;margin-toggle&#34;&gt;&amp;#8853;&lt;/label&gt;
&lt;input type=&#34;checkbox&#34; id=&#34;mn-akshay-pic&#34; class=&#34;margin-toggle&#34;&gt;
&lt;span class=&#34;marginnote&#34;&gt;
    
&lt;img class=&#34;polaroid right&#34; height=&#34;300&#34; width=&#34;300&#34; alt=&#34;&#34; src=&#34;http://localhost:1313/img/akshay-300x300.png&#34;&gt;

&lt;/span&gt;

and you&amp;rsquo;ve landed on my little patch of the web &amp;mdash; mazel
tov! As a brief introduction, I live in San Francisco, CA, where I&amp;rsquo;m an
engineer at &lt;a href=&#34;http://uber.com&#34;&gt;Uber&lt;/a&gt;. If you&amp;rsquo;d like to get in touch with me, you can
send me an &lt;a href=&#34;mailto:akshay@datahackermd.com&#34;&gt;email&lt;/a&gt;; I&amp;rsquo;m also on &lt;a href=&#34;http://twitter.com/akshayshah&#34;&gt;Twitter&lt;/a&gt;, &lt;a href=&#34;http://linkedin.com/in/akshayjshah&#34;&gt;LinkedIn&lt;/a&gt;, and &lt;a href=&#34;http://github.com/akshayjshah&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The first thing you&amp;rsquo;ll notice is that I&amp;rsquo;m the kind of person who calls this
page the colophon. What can I say? &amp;ldquo;About Me,&amp;rdquo; &amp;ldquo;Meet Akshay,&amp;rdquo; and &amp;ldquo;The Happy
Homepage for Rainbow Ponies&amp;rdquo; are just &lt;em&gt;so&lt;/em&gt; pedestrian. I like semicolons,
parenthetical asides, fountain pens, and suede elbow patches, too.  Look on the
bright side: despite my snotty East-Coast education, I still don&amp;rsquo;t own a single
pair of Madras shorts.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m easily excited&amp;ndash;show me something intriguing, and I&amp;rsquo;ll happily spend weeks
reading and experimenting. In the past, I&amp;rsquo;ve made fountain pen nibs and
medieval iron-gall ink, roasted my own coffee beans and opened a small espresso
shop, led a cross-country bicycle trip, and mistakenly concocted an underwater
blasting compound. Thus far, all lost fingertips have been successfully
reattached.&lt;/p&gt;

&lt;p&gt;Professionally, I&amp;rsquo;ve been a public school teacher, an &lt;abbr&gt;EMT&lt;/abbr&gt;, and a
medical student. After finishing medical school in 2011, I moved to California
and decided to pursue a career in software. If you&amp;rsquo;re interested, stay tuned
for a post about leaving medicine for Silicon Valley.&lt;/p&gt;

&lt;p&gt;Like the best software, this blog scratches a personal itch: I tend to scribble
notes while I&amp;rsquo;m thinking, but I miss longer-form writing. If my notes can be
polished into posts that other people find useful or entertaining, then I&amp;rsquo;ll be
thrilled; if not, I&amp;rsquo;ll enjoy the process anyways. Plus, setting up this site
was a &lt;a href=&#34;http://localhost:1313/post/hakyll-and-bootstrap/&#34;&gt;fun technical project&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The MIT License</title>
      <link>http://localhost:1313/license/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/license/</guid>
      <description>&lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the &amp;ldquo;Software&amp;rdquo;), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:&lt;/p&gt;

&lt;p&gt;The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.&lt;/p&gt;

&lt;p&gt;THE SOFTWARE IS PROVIDED &amp;ldquo;AS IS&amp;rdquo;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>